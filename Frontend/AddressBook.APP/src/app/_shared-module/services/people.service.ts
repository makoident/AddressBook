import { Injectable } from '@angular/core';
import { HttpClient, HttpParams } from '@angular/common/http';
import { Observable } from 'rxjs/internal/Observable';
import { PeopleList, Person } from '../models/person.model';
import { environment } from '../../../environments/environment';

@Injectable({
  providedIn: 'root'
})
export class PeopleService {

  baseURL: string = environment.appApiUrl + "/api/";

  constructor(private http: HttpClient) { }


  GetPeople(pageIndex: number, pageSize: number, orderByIdDesc: boolean): Observable<PeopleList> {
    const httpParameters = {
      params: new HttpParams().set('pageIndex', pageIndex.toString()).set('pageSize', pageSize.toString()).set('orderByIdDesc', orderByIdDesc.toString()) // prepare the url parameters for sending to the web api
    };
    return this.http.get<PeopleList>(this.baseURL + 'People', httpParameters) // get all people from the web api
  }


  SearchForPeople(pageIndex: number, pageSize: number, searchForPerson: Person): Observable<PeopleList> {
    const httpParameters = searchForPerson.ConvertToHttpParams(pageIndex, pageSize); // prepare the url parameters for sending to the web api
    return this.http.get<PeopleList>(this.baseURL + 'People/SearchForPeople', httpParameters); // search for people
  }


  DeletePerson(id: number): Observable<any> {
    const httpParameters = { params: new HttpParams().set('id', id.toString()) }; // set the id parameter
    return this.http.delete(this.baseURL + 'People/' + id, httpParameters)
  }


  UpdatePerson(person: Person): Observable<any> {
    const headers = { 'content-type': 'application/json' }
    const body = JSON.stringify(person);
    return this.http.put(this.baseURL + 'People/' + person.id, body, { 'headers': headers })
  }


  GetPerson(id: number): Observable<Person> {
    return this.http.get<Person>(this.baseURL + 'People/' + id.toString())
  }


  CreatePerson(person: Person): Observable<any> {
    const headers = { 'content-type': 'application/json' }
    const body = JSON.stringify(person);
    return this.http.post(this.baseURL + 'People/CreatePerson', body, { 'headers': headers })
  }












  // Helper function for generating the error title and subject from the error returned by the server
  GetNotificationDataForDialogBox(error: any) {
    var strError: string = "";
    var strTitle: string = "Error";

    if (error.error == null) {
      strError = 'Error arised on server side';
    } else if (typeof error.error.APIErrors != "undefined") { // error was generated by our api code
      strError = error.error.APIErrors[0];
    } else if (typeof error.error.errors != "undefined") { // error was generated automatically by the server's api code
      strError = error.error.errors[Object.keys(error.error.errors)[0]][0];
    } else { // unknown error
      strError = 'Obscure error arised on server side. TIP: Check if the server is up and running.';
    }

    return { title: strTitle, message: strError };
  }
}
